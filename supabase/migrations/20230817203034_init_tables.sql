create table "public"."bets" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "season_id" bigint not null,
    "bet" character varying not null,
    "value" integer not null
);


create table "public"."bets_against" (
    "id" bigint generated by default as identity not null,
    "bet_id" bigint not null,
    "user_id" uuid not null
);


create table "public"."clutches" (
    "id" bigint generated by default as identity not null,
    "player_id" bigint not null,
    "match_id" bigint not null
);


create table "public"."fantasy_teams" (
    "id" bigint generated by default as identity not null,
    "season_id" bigint not null,
    "user_id" uuid not null,
    "captain_id" bigint,
    "name" character varying not null
);


create table "public"."fantasy_teams_players" (
    "fantasy_team_id" bigint not null,
    "player_id" bigint not null
);


create table "public"."goals" (
    "id" bigint generated by default as identity not null,
    "match_id" bigint not null,
    "goal_player_id" bigint not null,
    "assist_player_id" bigint not null
);


create table "public"."matches" (
    "id" bigint generated by default as identity not null,
    "season_id" bigint not null,
    "team_home_id" bigint not null,
    "team_away_id" bigint not null
);


create table "public"."players" (
    "id" bigint generated by default as identity not null,
    "name" character varying not null default 'Navn Navnesen'::character varying,
    "image" text not null default 'placeholder.png'::text
);


create table "public"."players_seasons" (
    "player_id" bigint not null,
    "season_id" bigint not null,
    "attack" integer not null default 50,
    "defence" integer not null default 50,
    "physical" integer not null default 50,
    "morale" integer not null default 50,
    "price" bigint not null default '3000'::bigint,
    "skill" integer not null default 50
);


create table "public"."seasons" (
    "id" bigint generated by default as identity not null,
    "start_time" timestamp without time zone not null,
    "deadline_time" timestamp without time zone not null,
    "end_time" timestamp without time zone not null,
    "name" character varying not null,
    "starting_currency" bigint not null default '25000'::bigint
);


create table "public"."teams" (
    "id" bigint generated by default as identity not null,
    "season_id" bigint not null,
    "name" character varying not null,
    "color" character varying not null default 'white'::character varying
);


create table "public"."teams_players" (
    "player_id" bigint not null,
    "team_id" bigint not null,
    "id" bigint generated by default as identity not null
);


create table "public"."users" (
    "id" uuid not null,
    "is_admin" boolean default false,
    "is_superadmin" boolean default false,
    "nickname" character varying not null default 'John Doe'::character varying
);


CREATE UNIQUE INDEX bets_against_pkey ON public.bets_against USING btree (id);

CREATE UNIQUE INDEX bets_pkey ON public.bets USING btree (id);

CREATE UNIQUE INDEX clutches_pkey ON public.clutches USING btree (id);

CREATE UNIQUE INDEX fantasy_teams_pkey ON public.fantasy_teams USING btree (id);

CREATE UNIQUE INDEX fantasy_teams_players_pkey ON public.fantasy_teams_players USING btree (fantasy_team_id, player_id);

CREATE UNIQUE INDEX goals_pkey ON public.goals USING btree (id);

CREATE INDEX match_index ON public.matches USING btree (id);

CREATE UNIQUE INDEX matches_pkey ON public.matches USING btree (id);

CREATE INDEX player_index ON public.players USING btree (id);

CREATE UNIQUE INDEX players_pkey ON public.players USING btree (id);

CREATE UNIQUE INDEX players_seasons_pkey ON public.players_seasons USING btree (player_id, season_id);

CREATE UNIQUE INDEX seasons_name_key ON public.seasons USING btree (name);

CREATE UNIQUE INDEX seasons_pkey ON public.seasons USING btree (id);

CREATE INDEX team_index ON public.teams USING btree (id);

CREATE UNIQUE INDEX teams_pkey ON public.teams USING btree (id);

CREATE UNIQUE INDEX teams_players_pkey ON public.teams_players USING btree (id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

alter table "public"."bets" add constraint "bets_pkey" PRIMARY KEY using index "bets_pkey";

alter table "public"."bets_against" add constraint "bets_against_pkey" PRIMARY KEY using index "bets_against_pkey";

alter table "public"."clutches" add constraint "clutches_pkey" PRIMARY KEY using index "clutches_pkey";

alter table "public"."fantasy_teams" add constraint "fantasy_teams_pkey" PRIMARY KEY using index "fantasy_teams_pkey";

alter table "public"."fantasy_teams_players" add constraint "fantasy_teams_players_pkey" PRIMARY KEY using index "fantasy_teams_players_pkey";

alter table "public"."goals" add constraint "goals_pkey" PRIMARY KEY using index "goals_pkey";

alter table "public"."matches" add constraint "matches_pkey" PRIMARY KEY using index "matches_pkey";

alter table "public"."players" add constraint "players_pkey" PRIMARY KEY using index "players_pkey";

alter table "public"."players_seasons" add constraint "players_seasons_pkey" PRIMARY KEY using index "players_seasons_pkey";

alter table "public"."seasons" add constraint "seasons_pkey" PRIMARY KEY using index "seasons_pkey";

alter table "public"."teams" add constraint "teams_pkey" PRIMARY KEY using index "teams_pkey";

alter table "public"."teams_players" add constraint "teams_players_pkey" PRIMARY KEY using index "teams_players_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."bets" add constraint "bets_season_id_fkey" FOREIGN KEY (season_id) REFERENCES seasons(id) not valid;

alter table "public"."bets" validate constraint "bets_season_id_fkey";

alter table "public"."bets" add constraint "bets_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table "public"."bets" validate constraint "bets_user_id_fkey";

alter table "public"."bets_against" add constraint "bets_against_bet_id_fkey" FOREIGN KEY (bet_id) REFERENCES bets(id) ON DELETE CASCADE not valid;

alter table "public"."bets_against" validate constraint "bets_against_bet_id_fkey";

alter table "public"."bets_against" add constraint "bets_against_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table "public"."bets_against" validate constraint "bets_against_user_id_fkey";

alter table "public"."clutches" add constraint "clutches_match_id_fkey" FOREIGN KEY (match_id) REFERENCES matches(id) not valid;

alter table "public"."clutches" validate constraint "clutches_match_id_fkey";

alter table "public"."clutches" add constraint "clutches_player_id_fkey" FOREIGN KEY (player_id) REFERENCES players(id) not valid;

alter table "public"."clutches" validate constraint "clutches_player_id_fkey";

alter table "public"."fantasy_teams" add constraint "fantasy_teams_captain_id_fkey" FOREIGN KEY (captain_id) REFERENCES players(id) not valid;

alter table "public"."fantasy_teams" validate constraint "fantasy_teams_captain_id_fkey";

alter table "public"."fantasy_teams" add constraint "fantasy_teams_season_id_fkey" FOREIGN KEY (season_id) REFERENCES seasons(id) not valid;

alter table "public"."fantasy_teams" validate constraint "fantasy_teams_season_id_fkey";

alter table "public"."fantasy_teams" add constraint "fantasy_teams_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table "public"."fantasy_teams" validate constraint "fantasy_teams_user_id_fkey";

alter table "public"."fantasy_teams_players" add constraint "fantasy_teams_players_fantasy_team_id_fkey" FOREIGN KEY (fantasy_team_id) REFERENCES fantasy_teams(id) not valid;

alter table "public"."fantasy_teams_players" validate constraint "fantasy_teams_players_fantasy_team_id_fkey";

alter table "public"."fantasy_teams_players" add constraint "fantasy_teams_players_player_id_fkey" FOREIGN KEY (player_id) REFERENCES players(id) not valid;

alter table "public"."fantasy_teams_players" validate constraint "fantasy_teams_players_player_id_fkey";

alter table "public"."goals" add constraint "goals_assist_player_id_fkey" FOREIGN KEY (assist_player_id) REFERENCES players(id) not valid;

alter table "public"."goals" validate constraint "goals_assist_player_id_fkey";

alter table "public"."goals" add constraint "goals_goal_player_id_fkey" FOREIGN KEY (goal_player_id) REFERENCES players(id) not valid;

alter table "public"."goals" validate constraint "goals_goal_player_id_fkey";

alter table "public"."goals" add constraint "goals_match_id_fkey" FOREIGN KEY (match_id) REFERENCES matches(id) not valid;

alter table "public"."goals" validate constraint "goals_match_id_fkey";

alter table "public"."matches" add constraint "matches_season_id_fkey" FOREIGN KEY (season_id) REFERENCES seasons(id) not valid;

alter table "public"."matches" validate constraint "matches_season_id_fkey";

alter table "public"."matches" add constraint "matches_team_away_id_fkey" FOREIGN KEY (team_away_id) REFERENCES teams(id) not valid;

alter table "public"."matches" validate constraint "matches_team_away_id_fkey";

alter table "public"."matches" add constraint "matches_team_home_id_fkey" FOREIGN KEY (team_home_id) REFERENCES teams(id) not valid;

alter table "public"."matches" validate constraint "matches_team_home_id_fkey";

alter table "public"."players_seasons" add constraint "players_seasons_player_id_fkey" FOREIGN KEY (player_id) REFERENCES players(id) not valid;

alter table "public"."players_seasons" validate constraint "players_seasons_player_id_fkey";

alter table "public"."players_seasons" add constraint "players_seasons_season_id_fkey" FOREIGN KEY (season_id) REFERENCES seasons(id) not valid;

alter table "public"."players_seasons" validate constraint "players_seasons_season_id_fkey";

alter table "public"."seasons" add constraint "seasons_name_key" UNIQUE using index "seasons_name_key";

alter table "public"."teams" add constraint "teams_season_id_fkey" FOREIGN KEY (season_id) REFERENCES seasons(id) not valid;

alter table "public"."teams" validate constraint "teams_season_id_fkey";

alter table "public"."teams_players" add constraint "teams_players_player_id_fkey" FOREIGN KEY (player_id) REFERENCES players(id) not valid;

alter table "public"."teams_players" validate constraint "teams_players_player_id_fkey";

alter table "public"."teams_players" add constraint "teams_players_team_id_fkey" FOREIGN KEY (team_id) REFERENCES teams(id) not valid;

alter table "public"."teams_players" validate constraint "teams_players_team_id_fkey";

alter table "public"."users" add constraint "users_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) not valid;

alter table "public"."users" validate constraint "users_id_fkey";

set check_function_bodies = off;

create or replace view "public"."bets_with_challengers" as  SELECT bet.id,
    bet.bet,
    bet.value,
    bet.season_id,
    jsonb_build_object('id', use.id, 'name', use.nickname) AS better,
    jsonb_agg(jsonb_build_object('id', cha.id, 'name', cha.nickname)) AS challengers
   FROM (((bets bet
     JOIN users use ON ((bet.user_id = use.id)))
     LEFT JOIN bets_against bag ON ((bet.id = bag.bet_id)))
     LEFT JOIN users cha ON ((bag.user_id = cha.id)))
  GROUP BY bet.id, use.id;


create or replace view "public"."fantasy_with_players" as  SELECT fat.id AS fantasy_team_id,
    fat.season_id,
    fat.user_id,
    fat.name,
    fat.captain_id,
    array_agg(fap.player_id) AS player_ids
   FROM (fantasy_teams fat
     JOIN fantasy_teams_players fap ON ((fat.id = fap.fantasy_team_id)))
  GROUP BY fat.id;


CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
begin
  insert into public.users (id, nickname)
  values (new.id, new.raw_user_meta_data->>'nickname');
  return new;
end;
$function$
;

create or replace view "public"."player_season_stats" as  SELECT pla.id AS player_id,
    pla.name,
    pla.image,
    pls.season_id,
    pls.attack,
    pls.defence,
    pls.physical,
    pls.morale,
    pls.skill,
    pls.price,
    tea.color AS team_color,
    tea.id AS team_id
   FROM (((players pla
     JOIN players_seasons pls ON ((pla.id = pls.player_id)))
     JOIN teams_players tp ON ((pla.id = tp.player_id)))
     JOIN teams tea ON ((tp.team_id = tea.id)))
  WHERE (pls.season_id = tea.season_id);


create or replace view "public"."team_with_stats" as  SELECT mat.id AS match_id,
    mat.season_id,
    tea.id AS team_id,
    tea.name,
    tea.color,
    jsonb_agg(jsonb_build_object('id', pla.id, 'name', pla.name, 'goals', ( SELECT count(goa.goal_player_id) AS count
           FROM goals goa
          WHERE ((goa.match_id = mat.id) AND (goa.goal_player_id = pla.id))), 'assists', ( SELECT count(goa.assist_player_id) AS count
           FROM goals goa
          WHERE ((goa.match_id = mat.id) AND (goa.assist_player_id = pla.id))), 'clutches', ( SELECT count(clu.player_id) AS count
           FROM clutches clu
          WHERE ((clu.match_id = mat.id) AND (clu.player_id = pla.id))))) AS players
   FROM (((matches mat
     LEFT JOIN teams tea ON (((mat.team_home_id = tea.id) OR (mat.team_away_id = tea.id))))
     JOIN teams_players tep ON ((tea.id = tep.team_id)))
     JOIN players pla ON ((tep.player_id = pla.id)))
  GROUP BY mat.id, tea.id;


create policy "Users are viewable by users who created them."
on "public"."users"
as permissive
for select
to public
using ((auth.uid() = id));

-- Make sure to add this when running `supabase db diff`, it is not added automatically
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();